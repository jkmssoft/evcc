// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CloudConnectServiceClient is the client API for CloudConnectService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CloudConnectServiceClient interface {
	SubscribeBackendRequest(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (CloudConnectService_SubscribeBackendRequestClient, error)
	SendEdgeUpdate(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
}

type cloudConnectServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCloudConnectServiceClient(cc grpc.ClientConnInterface) CloudConnectServiceClient {
	return &cloudConnectServiceClient{cc}
}

func (c *cloudConnectServiceClient) SubscribeBackendRequest(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (CloudConnectService_SubscribeBackendRequestClient, error) {
	stream, err := c.cc.NewStream(ctx, &CloudConnectService_ServiceDesc.Streams[0], "/CloudConnectService/SubscribeBackendRequest", opts...)
	if err != nil {
		return nil, err
	}
	x := &cloudConnectServiceSubscribeBackendRequestClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CloudConnectService_SubscribeBackendRequestClient interface {
	Recv() (*BackendRequest, error)
	grpc.ClientStream
}

type cloudConnectServiceSubscribeBackendRequestClient struct {
	grpc.ClientStream
}

func (x *cloudConnectServiceSubscribeBackendRequestClient) Recv() (*BackendRequest, error) {
	m := new(BackendRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cloudConnectServiceClient) SendEdgeUpdate(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	out := new(UpdateResponse)
	err := c.cc.Invoke(ctx, "/CloudConnectService/SendEdgeUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CloudConnectServiceServer is the server API for CloudConnectService service.
// All implementations must embed UnimplementedCloudConnectServiceServer
// for forward compatibility
type CloudConnectServiceServer interface {
	SubscribeBackendRequest(*SubscribeRequest, CloudConnectService_SubscribeBackendRequestServer) error
	SendEdgeUpdate(context.Context, *UpdateRequest) (*UpdateResponse, error)
	mustEmbedUnimplementedCloudConnectServiceServer()
}

// UnimplementedCloudConnectServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCloudConnectServiceServer struct {
}

func (UnimplementedCloudConnectServiceServer) SubscribeBackendRequest(*SubscribeRequest, CloudConnectService_SubscribeBackendRequestServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeBackendRequest not implemented")
}
func (UnimplementedCloudConnectServiceServer) SendEdgeUpdate(context.Context, *UpdateRequest) (*UpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendEdgeUpdate not implemented")
}
func (UnimplementedCloudConnectServiceServer) mustEmbedUnimplementedCloudConnectServiceServer() {}

// UnsafeCloudConnectServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CloudConnectServiceServer will
// result in compilation errors.
type UnsafeCloudConnectServiceServer interface {
	mustEmbedUnimplementedCloudConnectServiceServer()
}

func RegisterCloudConnectServiceServer(s grpc.ServiceRegistrar, srv CloudConnectServiceServer) {
	s.RegisterService(&CloudConnectService_ServiceDesc, srv)
}

func _CloudConnectService_SubscribeBackendRequest_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CloudConnectServiceServer).SubscribeBackendRequest(m, &cloudConnectServiceSubscribeBackendRequestServer{stream})
}

type CloudConnectService_SubscribeBackendRequestServer interface {
	Send(*BackendRequest) error
	grpc.ServerStream
}

type cloudConnectServiceSubscribeBackendRequestServer struct {
	grpc.ServerStream
}

func (x *cloudConnectServiceSubscribeBackendRequestServer) Send(m *BackendRequest) error {
	return x.ServerStream.SendMsg(m)
}

func _CloudConnectService_SendEdgeUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudConnectServiceServer).SendEdgeUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CloudConnectService/SendEdgeUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudConnectServiceServer).SendEdgeUpdate(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CloudConnectService_ServiceDesc is the grpc.ServiceDesc for CloudConnectService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CloudConnectService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CloudConnectService",
	HandlerType: (*CloudConnectServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendEdgeUpdate",
			Handler:    _CloudConnectService_SendEdgeUpdate_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeBackendRequest",
			Handler:       _CloudConnectService_SubscribeBackendRequest_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/connect.proto",
}
