// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CloudConnectServiceClient is the client API for CloudConnectService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CloudConnectServiceClient interface {
	SubscribeEdgeRequest(ctx context.Context, in *EdgeEnvironment, opts ...grpc.CallOption) (CloudConnectService_SubscribeEdgeRequestClient, error)
	SendEdgeResponse(ctx context.Context, opts ...grpc.CallOption) (CloudConnectService_SendEdgeResponseClient, error)
	SendEdgeUpdate(ctx context.Context, opts ...grpc.CallOption) (CloudConnectService_SendEdgeUpdateClient, error)
}

type cloudConnectServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCloudConnectServiceClient(cc grpc.ClientConnInterface) CloudConnectServiceClient {
	return &cloudConnectServiceClient{cc}
}

func (c *cloudConnectServiceClient) SubscribeEdgeRequest(ctx context.Context, in *EdgeEnvironment, opts ...grpc.CallOption) (CloudConnectService_SubscribeEdgeRequestClient, error) {
	stream, err := c.cc.NewStream(ctx, &CloudConnectService_ServiceDesc.Streams[0], "/CloudConnectService/SubscribeEdgeRequest", opts...)
	if err != nil {
		return nil, err
	}
	x := &cloudConnectServiceSubscribeEdgeRequestClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CloudConnectService_SubscribeEdgeRequestClient interface {
	Recv() (*EdgeRequest, error)
	grpc.ClientStream
}

type cloudConnectServiceSubscribeEdgeRequestClient struct {
	grpc.ClientStream
}

func (x *cloudConnectServiceSubscribeEdgeRequestClient) Recv() (*EdgeRequest, error) {
	m := new(EdgeRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cloudConnectServiceClient) SendEdgeResponse(ctx context.Context, opts ...grpc.CallOption) (CloudConnectService_SendEdgeResponseClient, error) {
	stream, err := c.cc.NewStream(ctx, &CloudConnectService_ServiceDesc.Streams[1], "/CloudConnectService/SendEdgeResponse", opts...)
	if err != nil {
		return nil, err
	}
	x := &cloudConnectServiceSendEdgeResponseClient{stream}
	return x, nil
}

type CloudConnectService_SendEdgeResponseClient interface {
	Send(*EdgeResponse) error
	CloseAndRecv() (*Empty, error)
	grpc.ClientStream
}

type cloudConnectServiceSendEdgeResponseClient struct {
	grpc.ClientStream
}

func (x *cloudConnectServiceSendEdgeResponseClient) Send(m *EdgeResponse) error {
	return x.ClientStream.SendMsg(m)
}

func (x *cloudConnectServiceSendEdgeResponseClient) CloseAndRecv() (*Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cloudConnectServiceClient) SendEdgeUpdate(ctx context.Context, opts ...grpc.CallOption) (CloudConnectService_SendEdgeUpdateClient, error) {
	stream, err := c.cc.NewStream(ctx, &CloudConnectService_ServiceDesc.Streams[2], "/CloudConnectService/SendEdgeUpdate", opts...)
	if err != nil {
		return nil, err
	}
	x := &cloudConnectServiceSendEdgeUpdateClient{stream}
	return x, nil
}

type CloudConnectService_SendEdgeUpdateClient interface {
	Send(*UpdateRequest) error
	CloseAndRecv() (*Empty, error)
	grpc.ClientStream
}

type cloudConnectServiceSendEdgeUpdateClient struct {
	grpc.ClientStream
}

func (x *cloudConnectServiceSendEdgeUpdateClient) Send(m *UpdateRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *cloudConnectServiceSendEdgeUpdateClient) CloseAndRecv() (*Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CloudConnectServiceServer is the server API for CloudConnectService service.
// All implementations must embed UnimplementedCloudConnectServiceServer
// for forward compatibility
type CloudConnectServiceServer interface {
	SubscribeEdgeRequest(*EdgeEnvironment, CloudConnectService_SubscribeEdgeRequestServer) error
	SendEdgeResponse(CloudConnectService_SendEdgeResponseServer) error
	SendEdgeUpdate(CloudConnectService_SendEdgeUpdateServer) error
	mustEmbedUnimplementedCloudConnectServiceServer()
}

// UnimplementedCloudConnectServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCloudConnectServiceServer struct {
}

func (UnimplementedCloudConnectServiceServer) SubscribeEdgeRequest(*EdgeEnvironment, CloudConnectService_SubscribeEdgeRequestServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeEdgeRequest not implemented")
}
func (UnimplementedCloudConnectServiceServer) SendEdgeResponse(CloudConnectService_SendEdgeResponseServer) error {
	return status.Errorf(codes.Unimplemented, "method SendEdgeResponse not implemented")
}
func (UnimplementedCloudConnectServiceServer) SendEdgeUpdate(CloudConnectService_SendEdgeUpdateServer) error {
	return status.Errorf(codes.Unimplemented, "method SendEdgeUpdate not implemented")
}
func (UnimplementedCloudConnectServiceServer) mustEmbedUnimplementedCloudConnectServiceServer() {}

// UnsafeCloudConnectServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CloudConnectServiceServer will
// result in compilation errors.
type UnsafeCloudConnectServiceServer interface {
	mustEmbedUnimplementedCloudConnectServiceServer()
}

func RegisterCloudConnectServiceServer(s grpc.ServiceRegistrar, srv CloudConnectServiceServer) {
	s.RegisterService(&CloudConnectService_ServiceDesc, srv)
}

func _CloudConnectService_SubscribeEdgeRequest_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EdgeEnvironment)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CloudConnectServiceServer).SubscribeEdgeRequest(m, &cloudConnectServiceSubscribeEdgeRequestServer{stream})
}

type CloudConnectService_SubscribeEdgeRequestServer interface {
	Send(*EdgeRequest) error
	grpc.ServerStream
}

type cloudConnectServiceSubscribeEdgeRequestServer struct {
	grpc.ServerStream
}

func (x *cloudConnectServiceSubscribeEdgeRequestServer) Send(m *EdgeRequest) error {
	return x.ServerStream.SendMsg(m)
}

func _CloudConnectService_SendEdgeResponse_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CloudConnectServiceServer).SendEdgeResponse(&cloudConnectServiceSendEdgeResponseServer{stream})
}

type CloudConnectService_SendEdgeResponseServer interface {
	SendAndClose(*Empty) error
	Recv() (*EdgeResponse, error)
	grpc.ServerStream
}

type cloudConnectServiceSendEdgeResponseServer struct {
	grpc.ServerStream
}

func (x *cloudConnectServiceSendEdgeResponseServer) SendAndClose(m *Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *cloudConnectServiceSendEdgeResponseServer) Recv() (*EdgeResponse, error) {
	m := new(EdgeResponse)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _CloudConnectService_SendEdgeUpdate_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CloudConnectServiceServer).SendEdgeUpdate(&cloudConnectServiceSendEdgeUpdateServer{stream})
}

type CloudConnectService_SendEdgeUpdateServer interface {
	SendAndClose(*Empty) error
	Recv() (*UpdateRequest, error)
	grpc.ServerStream
}

type cloudConnectServiceSendEdgeUpdateServer struct {
	grpc.ServerStream
}

func (x *cloudConnectServiceSendEdgeUpdateServer) SendAndClose(m *Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *cloudConnectServiceSendEdgeUpdateServer) Recv() (*UpdateRequest, error) {
	m := new(UpdateRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CloudConnectService_ServiceDesc is the grpc.ServiceDesc for CloudConnectService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CloudConnectService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CloudConnectService",
	HandlerType: (*CloudConnectServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeEdgeRequest",
			Handler:       _CloudConnectService_SubscribeEdgeRequest_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SendEdgeResponse",
			Handler:       _CloudConnectService_SendEdgeResponse_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "SendEdgeUpdate",
			Handler:       _CloudConnectService_SendEdgeUpdate_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "proto/connect.proto",
}
